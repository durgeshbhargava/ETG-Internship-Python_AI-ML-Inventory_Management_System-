{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "40e61e6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "===========================================================================\n",
      "                            INVENTARY MANAGEMENT\n",
      "===========================================================================\n",
      "\n",
      "\t\tEnter 1 for See the Products\n",
      "\t\tEnter 2 for Update the Products\n",
      "\t\tEnter 3 for Puchase the Products\n",
      "\t\tEnter 4 for See Sales Products\n",
      "\t\tEnter 5 for Exit\n",
      "\n",
      "\t\tEnter Your Choice : 1\n",
      "                                     PRODUCTS LIST\n",
      "\n",
      "\t\tProduct Id.     Product Name         Price           Quantity  \n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "list indices must be integers or slices, not str",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-2-e2c1b5d770cf>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     29\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"\\n\\t\\t%-15s %-20s %-15s %-10s\"\u001b[0m\u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;34m\"Product Id.\"\u001b[0m \u001b[1;33m,\u001b[0m\u001b[1;34m\"Product Name\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"Price\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"Quantity\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     30\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrecords\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 31\u001b[1;33m             \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"\\t\\t%-15s %-20s %-15f %-10d\"\u001b[0m\u001b[1;33m%\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrecords\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'name'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrecords\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'pr'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mrecords\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'qn'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     32\u001b[0m         \u001b[0mrecord_file\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     33\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: list indices must be integers or slices, not str"
     ]
    }
   ],
   "source": [
    "#importig json package\n",
    "import json\n",
    "#Function to Create Line\n",
    "def line():\n",
    "    print(\"===========================================================================\")\n",
    "\n",
    "#Function to create heading\n",
    "def heading(str):\n",
    "    print(\"                            \"+str)\n",
    "\n",
    "\n",
    "line()\n",
    "heading(\"INVENTARY MANAGEMENT\")\n",
    "line()\n",
    "while(1):\n",
    "    print(\"\\n\\t\\tEnter 1 for See the Products\")\n",
    "    print(\"\\t\\tEnter 2 for Update the Products\")\n",
    "    print(\"\\t\\tEnter 3 for Puchase the Products\")\n",
    "    print(\"\\t\\tEnter 4 for See Sales Products\")\n",
    "    print(\"\\t\\tEnter 5 for Exit\")\n",
    "    choice=input(\"\\n\\t\\tEnter Your Choice : \")\n",
    "\n",
    "    #For See the Product\n",
    "    if(choice=='1'):\n",
    "        record_file = open(\"record.json\",'r')\n",
    "        record_data = record_file.read()\n",
    "        records= json.loads(record_data)\n",
    "        heading(\"         PRODUCTS LIST\")\n",
    "        print(\"\\n\\t\\t%-15s %-20s %-15s %-10s\"% (\"Product Id.\" ,\"Product Name\",\"Price\", \"Quantity\"))\n",
    "        for i in records.keys():\n",
    "            print(\"\\t\\t%-15s %-20s %-15f %-10d\"% (i,records[i]['name'],records[i]['pr'],records[i]['qn']))\n",
    "        record_file.close()\n",
    "\n",
    "    elif(choice=='2'):\n",
    "        record_file = open(\"record.json\",'r')\n",
    "        record_data = record_file.read()\n",
    "        record_file.close()\n",
    "        records= json.loads(record_data)\n",
    "        prod_id =input(\"\\t\\tEnter product id : \")\n",
    "        product_name = input(\"\\t\\tEnter name : \")\n",
    "        product_pr = float(input(\"\\t\\tEnter price : \"))\n",
    "        product_qn = int(input(\"\\t\\tEnter quantity : \"))\n",
    "        records[prod_id] = {'name': product_name, 'pr': product_pr, 'qn': product_qn}\n",
    "        all_data = json.dumps(records)\n",
    "        record_file = open(\"record.json\",'w')\n",
    "        record_file.write(all_data)\n",
    "        record_file.close()\n",
    "\n",
    "    elif(choice=='3'):\n",
    "        record_file = open(\"record.json\",'r')\n",
    "        record_data = record_file.read()\n",
    "        record_file.close()\n",
    "        records= json.loads(record_data)\n",
    "        ui_prod  = input(\"\\t\\tEnter the product_Id: \")\n",
    "        ui_quant = int(input(\"\\t\\tEnter the quantity: \"))\n",
    "        #For validating the number of product is more or not\n",
    "        if(records[ui_prod]['qn']>=ui_quant):\n",
    "            print(\"\\n\\t\\t\\t|Product: \", records[ui_prod]['name'])\n",
    "            print(\"\\t\\t\\t|Price: \", records[ui_prod]['pr'])\n",
    "            print(\"\\t\\t\\t|Billing Amount: \", records[ui_prod]['pr'] * ui_quant)\n",
    "            print(\"\\t\\t\\t|Please Visit Again (*_*) \")\n",
    "            records[ui_prod]['qn'] = records[ui_prod]['qn'] - ui_quant\n",
    "\n",
    "            record_file = open(\"record.json\",'w')\n",
    "            all_data = json.dumps(records)\n",
    "            record_file.write(all_data)\n",
    "            record_file.close()\n",
    "\n",
    "            #Opening sales.json data in read mode\n",
    "            sales_file = open(\"sales.json\",'r')\n",
    "            sales_data= sales_file.read()\n",
    "            sales_file.close()\n",
    "            record= json.loads(sales_data)\n",
    "            record[len(record)+1] = {'name':records[ui_prod]['name'], 'pr':records[ui_prod]['pr'], 'qn':ui_quant}\n",
    "            #Opening sales.json file in writing mode to update the sales product\n",
    "            sales_file = open(\"sales.json\",'w')\n",
    "            all_data_sales = json.dumps(record)\n",
    "            sales_file.write(all_data_sales)\n",
    "            sales_file.close()\n",
    "        else:\n",
    "            print(\"\\n\\t\\t Sorry!! We have only \"+str(records[ui_prod]['qn'])+\" Product!!\")\n",
    "\n",
    "    #To see the sale.json data\n",
    "    elif(choice=='4'):\n",
    "        sales_file = open(\"sales.json\",'r')\n",
    "        sales_data = sales_file.read()\n",
    "        records= json.loads(sales_data)\n",
    "        heading(\"SELL PRODUCTS LIST\")\n",
    "        print(\"\\n\\t\\t%-15s %-20s %-15s %-10s\"% (\"Product Id.\" ,\"Product Name\",\"Price\", \"Quantity\"))\n",
    "        for i in records.keys():\n",
    "            print(\"\\t\\t%-15s %-20s %-15f %-10d\"% (i,records[i]['name'],records[i]['pr'],records[i]['qn']))\n",
    "        sales_file.close()\n",
    "\n",
    "    #To Exit\n",
    "    elif(choice=='5'):\n",
    "        break\n",
    "\n",
    "    #Invalid Choice\n",
    "    else:\n",
    "        print(\"Invalid Choice!!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "333dbca3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
